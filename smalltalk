" | cociente resto dividendo divisor |

dividendo:=(UIManager default request:'ingrese dividendo')asInteger.
divisor:=(UIManager default request:'ingrese divisor') asInteger.

cociente:=0.

[ dividendo >= divisor ] whileTrue:[dividendo:= dividendo - divisor. cociente:=cociente + 1.].
Transcript show:'el cociente es ',  cociente asString,'el resto es', dividendo  asString. 
"
"
| producto multiplicador multiplicando |
multiplicando :=(UIManager default request:'ingrese multiplicando') asInteger.
multiplicador:=(UIManager default request:'ingrese multiplicador') asInteger.

producto:=0.
1 to: multiplicador do:[:i| producto:=producto+multiplicando. ].
Transcript show:'el producto es', producto asString.
"

"| cal potencia base|

base:=(UIManager default request:'ingrese la base')asInteger.
potencia:=(UIManager default request:'ingrese la potencia') asInteger.
cal:=1.

1 to: potencia do:[:i|  cal:=cal*base. ].

Transcript show:'la potencia es', cal asString."

"| con comprobar ingreso |

ingreso:=(UIManager default request:'ingres un numero para determinar si es primo o no') asInteger.
con:=0.
1 to: ingreso do:[:i| comprobar:=ingreso \\ i. (comprobar=0) ifTrue:[con:=con+1.]. ].
( con=2) ifTrue:[Transcript show:'el numero es', ingreso asString, 'es primo' ]
       ifFalse:[Transcript show:'el numero es', ingreso asString,'no es primo'].

"


"| ingreso con comprobar|

ingreso:=(UIManager default request:'ingrese un numero para determinar si es par') asInteger.

comprobar:=(ingreso \\ 2).

(comprobar=0) ifTrue:[UIManager default inform: ingreso asString,'es par' ]
              ifFalse:[UIManager default inform: ingreso asString,'no es par' ].
"

" | lista ingreso comprobar |

ingreso:=(UIManager default request:'ingrese un numero para determinar sus multiplos')asInteger.
lista:=OrderedCollection new.
1 to: ingreso do:[:i| comprobar:=( ingreso \\ i). (comprobar=0)ifTrue:[ lista add:i ].].

Transcript show:'los multiplos de ingreso ', ingreso asString, 'son ' , lista asString.
"



" | ingreso comprobar arreglo1 arreglo2 |

arreglo1:= #( 2 3 5 7 ).
arreglo2:=#( 0 0 0 0 ).
[ ingreso ~=9999 ] whileTrue:[  
	ingreso:=(UIManager default request:'ingrese un numero') asInteger.
	
	1 to: (arreglo1 size) do:[:i|  comprobar:= (ingreso \\ (arreglo1 at:i)).(comprobar=0)ifTrue:[arreglo2 at:i put:((arreglo2 at:i)+1) ].].
    	
	
	
	
	].
1 to: (arreglo1 size) do:[:i| Transcript show:'la cantidad de multiplos  de', (arreglo1 at:i) asString, ' es ', (arreglo2 at:i) asString . ]. 

"

"| ingreso determinar division |

ingreso:=(UIManager default request:'ingrese un numero') asInteger.
determinar:=0.
1 to: (ingreso - 1 ) do:[:i| division:=(ingreso\\i). (division=0)ifTrue:[determinar:= determinar + i ]. ].

(determinar=ingreso)ifTrue:[UIManager default inform:'el numero es ', ingreso asString , 'es perfecto']
                     ifFalse:[UIManager default inform:'el numero es', ingreso asString, 'no es perfecto']. 

"

 | division ingreso1 ingreso2 determinar |

ingreso1:=(UIManager default request:'ingrese un primer numero') asInteger.
ingreso2:=(UIManager default request:'ingrese un segundo numero') asInteger.
determinar:=0.
1 to:( ingreso1 - 1 ) do:[:i| division:=(ingreso1\\i). (division=0)ifTrue:[determinar:=determinar + i.].].

(determinar=ingreso2) ifTrue:[ UIManager default inform: 'los numeros ', ingreso1 asString, ' y ' ,  ingreso2 asString, 'son amigos'.]
                      ifFalse:[UIManager default inform:'los numeros', ingreso1 asString, ' y ', ingreso2 asString , ' no son amigos']. 



--------------------------------------------------------------------------------------------------------------------------------------

" |arr cadena cantidad letra elemento|

cadena:=(UIManager default request:'ingrese algo').

arr:= Array new: cadena size.

1 to: cadena size do: [ :i|
    
    
    elemento:=Array new:2.
    letra:=(cadena at:i).
    cantidad:=(cadena select:[:j| j=(cadena at:i)]) size.
    elemento at:1 put:letra;at:2 put:cantidad.
    
    arr at:i put: elemento.
    
     ].
arr.


"

"| ingreso letraIngresada letraIngresada2 |

ingreso:=(UIManager default request:'ingrese una frase').
letraIngresada:=(UIManager default request:'ingrese una primer letra').
letraIngresada2:=(UIManager default request:'ingresea una segunda letra').

1 to: (ingreso size) do:[:i| ((ingreso at:i)=(letraIngresada at:1)) ifTrue:[ ingreso at:i put:(letraIngresada2 at:1).].].^ingreso 
"

 |lista2 ingresoFrase ingresoCaracteresProhibidos lista |

ingresoFrase:= (UIManager default request:'ingrese una frase') .
ingresoCaracteresProhibidos:= (UIManager default request:'ingrese la lista de caracteres prohidos').
lista:=ingresoFrase .
lista2:=ingresoFrase.
"ingresoFrase do:[:i| lista add:i]."

1 to:(ingresoFrase size) do:[:i| 
	
        1 to:( ingresoCaracteresProhibidos size) do:[:k| ((ingresoFrase at:i) =(ingresoCaracteresProhibidos at:k)) ifTrue:[ lista at:i  put:$.    ].].].
1 to:(lista size) do:[:j| ((lista at:j) ~=$.)ifTrue:[lista2 at:j put:(lista at:j)].].^lista2


"Transcript show: ingresoFrase asString .
Transcript show: lista" 

"|lista lista2|
lista:=OrderedCollection new.
lista2:=OrderedCollection new.
#(1 2 3 4 5 6 7 8 9 10)
    do: [:each | lista add:each]
    separatedBy: [lista add: ','].
lista do:[:i| (i~=',') ifTrue:[ lista2 add:i]].^lista2 "
---------------------------------------------------------------------------------------------------------------------------------------

| sumaVeces verificacionFinal resg divi arregloDivision arreglodeDiez ingreso multiPar sumaTodos |
"divi:=200890.
resg:= OrderedCollection  new.

[divi>10] whileTrue:[    resg add:((divi \\ 10)).
			               divi:= (divi // 10). 
			               
			                 ]. 
		   
		        arregloDivision:= OrderedCollection new.
		arregloDivision add: divi.           
		(resg size) to:1 by:-1  do:[:i| arregloDivision add: (resg at:i). ].^arregloDivision"   


arreglodeDiez:= Array new:11.
sumaTodos:=0.
sumaVeces:=0.
arregloDivision:= OrderedCollection new.
resg:=OrderedCollection new.
1 to: (arreglodeDiez size) do:[:i| 
	
    arreglodeDiez at:i put:((UIManager default request:'ingrese el elemento numero ', i asString , ' de 11 ')asInteger).
].

 (arreglodeDiez size) to: 1 by:-1 do:[:i| "sumaTodos:= (sumaTodos +  (arreglodeDiez at:i))"((i \\ 2)=0) ifTrue:[ multiPar:=((arreglodeDiez at:i) * 2). 
	                                                       (multiPar>10) ifTrue:[ divi:=(arreglodeDiez at:i). [divi>10] whileTrue:[
			                                                  resg add:(divi \\ 10).
			                                                  divi:= (divi // 10).]. 
			                                            arregloDivision add: divi.           
															(resg size) to:1 by:-1  do:[:j| arregloDivision add: (resg at:j). ].
																		arregloDivision do:[:k| sumaVeces:=sumaVeces + k.].
																		sumaTodos:=sumaTodos + sumaVeces.
		
		
		].]
           ifFalse:[ sumaTodos:=(sumaTodos + (arreglodeDiez at:i)).].
		
		
		                                      ].
	verificacionFinal:=(sumaTodos \\ 10).
	(verificacionFinal=0)ifTrue:[^true]
	                     ifFalse:[^false].   
 
